def integrate_result="unknown"
pipeline {
    agent any
    options {
       timeout(time: 2, unit: 'HOURS')
    }
    environment {
       integrate_result_home = "/home"
    }
    stages {
        stage('Test') {
            steps {
                echo 'Packaging....'
                sh 'mvn -P  CheckLicense,RaftTest,docker install'
            }
        }
        stage('Integrations Test') {
            steps {
                echo 'Integrations Test....'
                sh 'printenv'
                dir('docker/bin'){
                    sh ' pwd && git branch '
                    updateGitlabCommitStatus name: 'build', state: 'running'
                    sh './integrate_test.sh -s ${integrate_result_home} -b $(pwd)/integration/benchmark'
                }
                script{
                    def json_file = "${env.integrate_result_home}/score.json"
                    def exists = fileExists json_file
                    if(exists){
                        echo "${json_file}"
                        integrate_result = readFile json_file
                        sh "rm ${json_file}"
                    }else {
                        echo 'score file not exist'
                     }
                }
            }
        }
    }
    post {
            failure {
              updateGitlabCommitStatus name: 'build', state: 'failed'
            }
            success {
              updateGitlabCommitStatus name: 'build', state: 'success'
            }
            always {
                script{
                    echo "${integrate_result}"
                    def resultIcon = currentBuild.result == 'SUCCESS' ? ':white_check_mark:' : ':anguished:'
                    def performance = currentBuild.result == 'SUCCESS' ? "${integrate_result}" : ' '
                    addGitLabMRComment comment: "$resultIcon Jenkins Build $currentBuild.result\n\nResults available at: [Jenkins [$env.JOB_NAME#$env.BUILD_NUMBER]]($env.BUILD_URL) \n\n ${performance} "
                    echo 'I will always say Hello again!'
                }
             }
      }

}